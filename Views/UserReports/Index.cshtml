@model IEnumerable<GDR.Models.ReportResult>
@using System.Text.RegularExpressions;

@{
    ViewBag.Title = "Relatórios";
}


<h1>Listagem de tipos de bancos de dados</h1>

<br />
<form asp-controller="UserReports" asp-action="Index" method="get">
    <div class="col-md-12">
        <div class="form-group">
            <p class="col-form-label">Selecione um relatórios</p>
            <select class="form-control  col-md-12" asp-items="@ViewBag.ReportList" id="ReportList" name="ReportList">
                <option disabled selected></option>
            </select>
        </div>


        <div class="form-group">
            <p class="col-form-label">Selecione um banco de dados</p>
            <select class="form-control" multiple="multiple" id="DatabaseList" name="DatabaseList" asp-items="@ViewBag.DatabaseList">
            </select>
        </div>


        <p class="col-form-label">Filtro</p>
        <div class="input-group">

            <input type="text" id="Name" class="form-control table-filter-box" placeholder="Digite para pesquisar após o relatório ser exibido">
            <div class="input-group-append">
                <span class="input-group-text bg-success"><i class="text-light fa fa-search"></i></span>
            </div>
        </div>

        <br />

        <div align="right">
            <button type="submit" value="Pesquisar" class="btn btn-success">
                <span class=""></span>
                Exibir relatório
            </button>
        </div>

    </div>
    <br />
</form>

<div class="text-danger font-weight-bold">
    @Html.Raw(ViewBag.Error)
</div>


<div class="text-danger" id="divMessage"></div>

<table class="table" id="reportTable">
    @{
        bool header = true;
        int trId = 0;
        int quantity = 0;
        foreach (var item in Model)
        {
            if (header)
            {
                <thead class="table-report-header">

                    <tr id="@trId" class="">
                        @for (int i = 0; i < item.listaColuna.Count; i++)
                        {
                        <th>
                            <div class="order-table-div">
                                <div class="">
                                    @Html.DisplayFor(modelItem => item.listaColuna[i])
                                </div>
                                <div class="order-table-icons">
                                    <a id="orderBy" class="fa fa-angle-up  bg-transparent pointer" title="Ordenar crescente" onclick="sortTable('reportTable',@trId, 0)"></a>
                                    <a id="orderBy" class="fa fa-angle-down   bg-transparent pointer" title="Ordenar decrescente" onclick="sortTable('reportTable',@trId, 1)"></a>
                                </div>
                            </div>
                            

                        </th>
                            trId++;
                        }
                    </tr>

                </thead>

            }
            else
            {
                <tbody>

                    <tr onmouseover="ChangeLineColorAdd(this)" onmouseout="ChangeLineColorRemove(this)" class="tr-filter">
                        @for (int i = 0; i < item.listaColuna.Count; i++)
                        {
                            <td>
                                @{
                                    string value = item.listaColuna[i];

                                    //Verifica se o campo é um IP para não alterar as casas decimais
                                    string Pattern = @"^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$";
                                    Regex check = new Regex(Pattern);

                                    if (!check.IsMatch(value, 0))
                                    {
                                        decimal.TryParse(value, out decimal intValue);
                                        if (intValue != 0)
                                        {
                                            value = intValue.ToString("n");
                                        }
                                    }
                                }
                                @value
                            </td>
                        }
                    </tr>

                </tbody>
            }
            header = false;
            quantity++;
        }
    }
</table>



@section scripts{

    <script src="~/js/user-report.js"></script>
    <script src="~/js/table-filter.js"></script>

    <script>
        var quantity = @quantity;

     
        if (quantity >= 5000) {
            setDivMessageStatus(true, "<p><b>&nbsp; &nbsp;Somente são exibidos os primeiros 5.000 resultados. <br />&nbsp; &nbsp;A ordenação é desabilitada para consultas com mais de 1.000 resultados.</b></p>");

        }
        else if (quantity > 500) {
            setDivMessageStatus(true, "<p><b>&nbsp; &nbsp;A ordenação é desabilitada para consultas com mais de 1.000 resultados.</b></p>");
        }
        else {
            setDivMessageStatus(false, '');
        }
        
    </script>
}
